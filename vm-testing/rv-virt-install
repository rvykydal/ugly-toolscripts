#!/bin/bash

# https://tuxcare.com/blog/the-essential-kvm-cheat-sheet-for-system-administrators/
# https://www.cyberciti.biz/faq/howto-linux-delete-a-running-vm-guest-on-kvm/

# virsh list
# virsh list-all
# virsh dominfo
# virsh domblkinfo
# virsh domstate

# virsh start
# virsh reboot
# virsh stop
# virsh destroy
# virsh managedsave-remove # might be needed sometimes
# virsh undefine
# virsh undefine --remove-all-storage
# virsh dumpxml


UUID=`uuid`

if [ -z $1 ]; then
    echo "Usage: $0 <RVM_CONFIG> [info|force]"
    ls -1 *.rvm
    exit 1
fi

RVM_CONFIG=${1:-$UUID.rvm}
CMD=${2}

source $RVM_CONFIG

RVM_BOOT_ISO=${RVM_BOOT_ISO:-boot.iso}
RVM_BOOT_ISO_COPY=${RVM_CONFIG}.boot.iso

RVM_RAM=${RVM_RAM:-2048}
RVM_CPUS=${RVM_CPUS:-1}

_RANDOM_N=$((10 + $RANDOM % 90))
RANDOM_SSH_ADDR=127.0.0.${_RANDOM_N}
RANDOM_SSH_PORT=22${_RANDOM_N}
RVM_SSH_ADDR=${RVM_SSH_ADDR:-$RANDOM_SSH_ADDR}
RVM_SSH_PORT=${RVM_SSH_PORT:-$RANDOM_SSH_PORT}


RVM_HTTP_SERVER_KS_SCP=${RVM_HTTP_SERVER_KS_SCP:-10.43.136.2:/mnt/data/users/rv/ks/}
RVM_HTTP_SERVER_KS_GET=${RVM_HTTP_SERVER_KS_GET:-10.43.136.2/users/rv/ks/}
RVM_HTTP_SERVER_UPD_SCP=${RVM_HTTP_SERVER_UPD_SCP:-10.43.136.2:/mnt/data/users/rv/}
RVM_HTTP_SERVER_UPD_GET=${RVM_HTTP_SERVER_UPD_GET:-10.43.136.2/users/rv/}

RVM_NFS_SERVER_SCP=${RVM_NFS_SERVER_KS_SCP:-10.43.136.2:/mnt/data/users/rv/s2/rvm/images}
RVM_NFS_SERVER_ARG=${RVM_NFS_SERVER_ARG:-10.43.136.2:/mnt/data/users/rv/s2/rvm}


if [ ! -f ${RVM_CONFIG} ]; then
    echo Creating configuration file ${RVM_CONFIG}
    touch ${RVM_CONFIG}
fi

grep -q ^RVM_SSH_ADDR= ${RVM_CONFIG} || echo "RVM_SSH_ADDR=${RANDOM_SSH_ADDR}" >> ${RVM_CONFIG}
grep -q ^RVM_SSH_PORT= ${RVM_CONFIG} || echo "RVM_SSH_PORT=${RANDOM_SSH_PORT}" >> ${RVM_CONFIG}

echo ------ Config file ${RVM_CONFIG}
cat ${RVM_CONFIG}
echo ------

if [ "$CMD" == "info" ]; then
    echo ------ virsh dominfo $RVM_CONFIG
    virsh dominfo $RVM_CONFIG
    echo ------
    echo ------ kickstart $RVM_KS
    cat ${RVM_KS}
    echo ------
    exit 0
fi

if [ "$CMD" == "ks" ]; then
    $EDITOR ${RVM_KS}
    exit 0
fi

if [ "$CMD" == "conf" ]; then
    $EDITOR ${RVM_CONFIG}
    exit 0
fi

if [[ $(virsh dominfo $RVM_CONFIG) ]]; then
    echo "Domain '$RVM_CONFIG' already exists."

    if [ ! -z ${RVM_UEFI} ]; then
        nvram_arg=" --nvram"
    fi

    if [ "$CMD" == "remove" ]; then
        echo "Removing '$RVM_CONFIG'"
        virsh destroy $RVM_CONFIG
        virsh undefine $RVM_CONFIG --remove-all-storage ${nvram_arg}
        exit 0
    fi

    if [ "$CMD" == "remove-saved" ]; then
        echo "Removing saved '$RVM_CONFIG'"
        virsh managedsave-remove $RVM_CONFIG
        virsh destroy $RVM_CONFIG
        virsh undefine $RVM_CONFIG --remove-all-storage ${nvram_arg}
        exit 0
    fi


    if [ "$CMD" == "force" ]; then
        echo "Removing '$RVM_CONFIG'"
        virsh destroy $RVM_CONFIG
        virsh undefine $RVM_CONFIG --remove-all-storage ${nvram_arg}
    elif [ "$CMD" == "reuse-storage" ]; then
        echo "Removing '$RVM_CONFIG'"
        virsh destroy $RVM_CONFIG
        virsh undefine $RVM_CONFIG ${nvram_arg}
    else
        exit 1
    fi
fi

if [ ! -f ${RVM_BOOT_ISO} ]; then
    echo "Installer iso image (RVM_BOOT_ISO) ${RVM_BOOT_ISO} not found"
    exit 7
else
    echo "Copying ${RVM_BOOT_ISO} to ${RVM_BOOT_ISO_COPY}"
    cp ${RVM_BOOT_ISO} ${RVM_BOOT_ISO_COPY}
fi

VOLUME_ID=$(isoinfo -d -i ${RVM_BOOT_ISO_COPY} |  grep -oP 'Volume id: \K.*')
echo "VOLUME_ID: ${VOLUME_ID}"

KS_FILE="ks.${RVM_CONFIG}.cfg"

if [ ${RVM_KS_FROM_FILE} ]; then
    echo "Injecting kickstart '$RVM_KS' via './$KS_FILE'"
    cp $RVM_KS ./${KS_FILE}
    echo "Configuring injected kickstart to be used"
    EXTRA_KS_ARGS="inst.ks=file:/${KS_FILE}"
else
    touch $KS_FILE
    echo "Injecting '$KS_FILE'"
fi

if [ ${RVM_KS_FROM_HTTP} ]; then
    KS_HTTP_URL="http://${RVM_HTTP_SERVER_KS_GET}${KS_FILE}"
    echo "Uploading kickstart $RVM_KS to $KS_HTTP_URL"
    scp $RVM_KS ${RVM_HTTP_SERVER_KS_SCP}${KS_FILE}
    echo "Configuring uploaded kickstart to be used"
    EXTRA_KS_ARGS="inst.ks=${KS_HTTP_URL}"
fi

KS_ISO=rvm_ks.iso
KS_ISO_FILE=ks.cfg
if [ ${RVM_KS_FROM_CDROM} ]; then
    echo "Passing kickstart '$RVM_KS' via CDROM './$KS_ISO'"
    cp $RVM_KS ${KS_ISO_FILE}
    mkisofs -V RVM_KS -o $KS_ISO ${KS_ISO_FILE}
    echo "Configuring CDROM with kickstart to be used"
    EXTRA_KS_ARGS="inst.ks=cdrom:sr1:/${KS_ISO_FILE}"
    KS_CDROM_OPTION="--disk path=./${KS_ISO},device=cdrom,readonly=on,shareable=on"
fi

if [ ${RVM_KS_FROM_BOOTISO} ]; then
    echo "Passing kickstart '$RVM_KS' via boot iso CDROM './$KS_ISO'"
    cp $RVM_KS ./${KS_FILE}
    rm ${RVM_BOOT_ISO_COPY}
    mkksiso  --ks ${KS_FILE} ${RVM_BOOT_ISO} ${RVM_BOOT_ISO_COPY}
    EXTRA_KS_ARGS="inst.ks=hd:LABEL=${RVM_BOOTISO_LABEL}:/${KS_FILE}"
fi

MNT_DIR=rvm_mntdir

# sudo mount -t nfs -oro,nfsvers=3,nolock 10.43.136.2:/mnt/data/users/rv/s2/rvm m
if [ ${RVM_STAGE2_FROM_NFS} ]; then
    if [ ${RVM_STAGE2_FROM_NFS} == "reload" ]; then
        echo "Uploading install.img."
        mkdir ${MNT_DIR}
        sudo mount ${RVM_BOOT_ISO_COPY} ${MNT_DIR}
        scp ${MNT_DIR}/images/install.img ${RVM_NFS_SERVER_SCP}
        sudo umount ${MNT_DIR}
        rmdir ${MNT_DIR}
    fi
    STAGE2_ARG="--extra-args inst.stage2=nfs:${RVM_NFS_SERVER_ARG}"
fi

if [ ${RVM_STAGE2_FROM_ISO_BY_LABEL} ]; then
    echo "Using stage2 from the iso identified by LABEL ${VOLUME_ID}"
    if [ -z "${VOLUME_ID}" ]; then
        echo "Volume id not found. Stopping."
        exit 9
    fi
    STAGE2_ARG="--extra-args inst.stage2=hd:LABEL=${VOLUME_ID}"
fi

if [ ${RVM_UPDATES_IMG} ]; then
    UPDATES_IMG_NAME="updates.${RVM_CONFIG}${RVM_UPDATES_IMG_TAG}.img"
    UPDATES_IMG_URL="http://${RVM_HTTP_SERVER_UPD_GET}${UPDATES_IMG_NAME}"
    echo "Using updates image ${UPDATES_IMG_URL}"
    if [ ${RVM_UPDATES_IMG} == "refresh" ]; then
        echo "Refreshing updates image."
        cd ${RVM_UPDATES_IMG_PATH}
        eval ${RVM_UPDATES_IMG_CMD}
        scp updates.img ${RVM_HTTP_SERVER_UPD_SCP}${UPDATES_IMG_NAME}
        cd -
    fi
    UPDATES_IMG_ARG="--extra-args inst.updates=${UPDATES_IMG_URL}"
fi

for disk in $RVM_DISKS; do
    size=$(echo $RVM_DISKS | cut -d":" -f1)
    filename=$(echo $RVM_DISKS | cut -d":" -f2)
    action=$(echo $RVM_DISKS | cut -d":" -f3)
    if [ -z ${filename} ]; then
        filename=$(mktemp --suffix .${RVM_CONFIG}.qcow2 disk-XXXX)
        echo "Creating disk $filename with size $size"
        qemu-img create -f qcow2 ${filename} ${size}
    else
        if [ "${action}" == "reuse" ]; then
            if [ ! -e ${filename} ]; then
                echo "Disk $filename to be reused not found"
                exit 8
            fi
            echo "Reusing disk $filename"
        elif [ "${action}" == "reuse-or-create" ]; then
            if [ ! -e ${filename} ]; then
                echo "Creating disk $filename with size $size"
                qemu-img create -f qcow2 ${filename} ${size}
            fi
        else
            if [ -e ${filename} ]; then
                echo "Disk $filename already exists, use 'reuse' or remove it"
                exit 9
            fi
            echo "Creating disk $filename with size $size"
            qemu-img create -f qcow2 ${filename} ${size}
        fi
    fi
    DISKS_ARGS="${DISKS_ARGS} --disk path=${filename},bus=virtio,cache=unsafe "
done

CDROM_INDEX=0
for iso in $RVM_CDROMS; do
    localiso="edns-global.rvm.cdrom.${CDROM_INDEX}.iso"
    cp ${iso} ${localiso}
    CDROM_ARGS="${CDROM_ARGS} --disk path=${localiso},device=cdrom "
    let INDEX=${INDEX}+1
done



if [ ! -z ${RVM_UEFI} ]; then
    UEFI_ARG="--boot uefi"
fi

if [ ! -z ${RVM_INJECT_SCRIPT} ]; then
    RVM_INJECT_DIR=./dracut-updates
    RVM_INJECT_TARBALL=dracut-update.tar.gz
    export RVM_INJECT_DIR
    export RVM_INJECT_TARBALL
    eval ${RVM_INJECT_SCRIPT}${RVM_INJECT_SCRIPT_OPTS}
    INJECT_DIR_TARBALL_ARG=" --initrd-inject ${RVM_INJECT_DIR}/${RVM_INJECT_TARBALL}"
    INJECT_DIR_SCRIPT_ARG=" --initrd-inject ${RVM_INJECT_SCRIPT}"
fi

if [ -n "${RVM_LIVECD}" ]; then
    if [ -z "${VOLUME_ID}" ]; then
        echo "Volume id for LiveCD not found. Stopping."
        exit 9
    fi
    LIVE_CD_ARGS="root=live:CDLABEL=${VOLUME_ID} rd.live.image quiet rhgb"
fi


if [ ! -z ${RVM_OSINFO} ]; then
    if [ "${RVM_OSINFO}" == "fedora42" ]; then
        if [ -n "${RVM_LIVECD}" ]; then
            echo "RVM_OSINFO == fedora42 LiveCD - using new iso layout in --location"
            LOCATION=",kernel=boot/x86_64/loader/linux,initrd=boot/x86_64/loader/initrd"
        fi
    else
        LOCATION=",kernel=images/pxeboot/vmlinuz,initrd=images/pxeboot/initrd.img"
        OSINFO_ARG=" --osinfo ${RVM_OSINFO}"
    fi
fi

virt-install \
        --name ${RVM_CONFIG} \
        --memory ${RVM_RAM} \
        --noautoconsole \
        --connect "qemu:///session" \
        --vcpus ${RVM_CPUS} \
        --rng /dev/random \
        --osinfo require=off,detect=on \
        --graphics vnc,listen=0.0.0.0 \
        --video virtio \
        --extra-args "inst.sshd inst.debug debug=1" \
        --location ./${RVM_BOOT_ISO_COPY}${LOCATION} \
        --disk none \
        --network none \
        --qemu-commandline="-netdev user,id=hostnet0,hostfwd=tcp:${RVM_SSH_ADDR}:${RVM_SSH_PORT}-:22 -device virtio-net-pci,netdev=hostnet0,id=net0,addr=0x16 ${RVM_QEMU_COMMANDLINE}" \
        --extra-args "${RVM_EXTRA_ARGS}" \
        --initrd-inject "./${KS_FILE}" \
        --extra-args "${EXTRA_KS_ARGS}" \
        --extra-args "${LIVE_CD_ARGS}" \
        ${KS_CDROM_OPTION} \
        ${STAGE2_ARG} \
        ${UPDATES_IMG_ARG} \
        ${DISKS_ARGS} \
        ${CDROM_ARGS} \
        ${UEFI_ARG} \
        ${INJECT_DIR_TARBALL_ARG} \
        ${INJECT_DIR_SCRIPT_ARG} \
        ${OSINFO_ARG} \
#        --disk path=./${KS_ISO},device=cdrom,readonly=on,shareable=on \
#        --network user,model=virtio \
#        --boot uefi \
#        --initrd-inject ks.${RVM_CONFIG}.cfg \
#       --disk \

# network: user or bridge or solution from machine_install.py

# ssh -o ControlPath=/tmp/.cockpit-test-resources/ssh-%C-122182 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 2201 root@127.0.0.2

# qemu-system-x86_64 -enable-kvm -name libvirt_debbox -S -machine pc-i440fx-2.1,accel=kvm -m 512 -smp 1,sockets=1,cores=1,threads=1 -uuid 4b9c09e6-a78e-4bd3-81d6-f8f24b0d9a27 -no-user-config -nodefaults -chardev socket,id=charmonitor,path=/var/lib/libvirt/qemu/libvirt_debbox.monitor,server,nowait -mon chardev=charmonitor,id=monitor,mode=control -rtc base=utc -no-shutdown -boot c -usb -drive file=/var/lib/libvirt/images/libvirt_debbox.img,if=none,id=drive-virtio-disk0,format=qcow2 -device virtio-blk-pci,bus=pci.0,addr=0x3,drive=drive-virtio-disk0,id=virtio-disk0 -netdev tap,fd=25,id=hostnet0,vhost=on,vhostfd=26 -device virtio-net-pci,netdev=hostnet0,id=net0,mac=52:54:00:ec:12:54,bus=pci.0,addr=0x5 -chardev pty,id=charserial0 -device isa-serial,chardev=charserial0,id=serial0 -vnc 127.0.0.1:0 -k en-us -vga cirrus -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x4

#virt-install ['-n', 'kstest-reboot-uefi_(1efabf86-677d-4644-b904-3de70cf756c7)', '-r', '2048', '--noautoconsole', '--vcpus', '1', '--rng', '/dev/random', '--osinfo', 'require=off,detect=on', '--graphics', 'vnc,listen=0.0.0.0', '--video', 'virtio', '--initrd-inject', '/opt/kstest/kickstart-tests/reboot-uefi.ks', '--disk', 'path=/var/tmp/kstest-reboot-uefi.2024_10_15-15_02_43.jhcdqmz4/disk-a.img,cache=unsafe,bus=virtio', '--network', 'user,model=virtio', '--disk', 'path=/var/tmp/kstest-reboot-uefi.2024_10_15-15_02_43.jhcdqmz4/boot.iso,device=cdrom,readonly=on,shareable=on', '--boot', 'uefi', '--extra-args', 'inst.ks=file:/reboot-uefi.ks debug=1 inst.debug rd.shell=0 rd.emergency=poweroff inst.kernel.hung_task_timeout_secs=1200 inst.stage2=hd:CDLABEL=Fedora-E-dvd-x86_64-rawh', '--location', '/var/tmp/kstest-reboot-uefi.2024_10_15-15_02_43.jhcdqmz4/boot.iso,kernel=images/pxeboot/vmlinuz,initrd=images/pxeboot/initrd.img', '--channel', 'tcp,host=127.0.0.1:45987,mode=connect,target_type=virtio,name=org.fedoraproject.anaconda.log.0', '--wait', '30']

[ -z ${RVM_NOVIEWER} ] && virt-viewer $RVM_CONFIG &

# vim: tabstop=4 shiftwidth=4 expandtab
